name: Changelog Management

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  issue_comment:
    types: [created]
  push:
    tags:
      - "v*"

jobs:
  validate-changelog:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Validate Changelog Format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: uv pip install pyyaml

      - name: Validate changelog format
        run: |
          python << 'EOF'
          import re
          import yaml
          from pathlib import Path

          changelog_file = Path('CHANGELOG.md')
          if not changelog_file.exists():
              print("❌ CHANGELOG.md file not found!")
              exit(1)

          content = changelog_file.read_text()

          # Check for required sections
          required_patterns = [
              r'# Changelog',
              r'## \[Unreleased\]',
              r'### (Added|Changed|Deprecated|Removed|Fixed|Security)',
          ]

          for pattern in required_patterns:
              if not re.search(pattern, content):
                  print(f"❌ Missing required pattern: {pattern}")
                  exit(1)

          print("✅ Changelog format is valid")
          EOF

      - name: Check for changelog entries
        id: check-changelog
        run: |
          python << 'EOF'
          import re
          from pathlib import Path

          changelog_file = Path('CHANGELOG.md')
          content = changelog_file.read_text()

          # Extract Unreleased section
          unreleased_match = re.search(r'## \[Unreleased\](.*?)(?=## \[|$)', content, re.DOTALL)
          if unreleased_match:
              unreleased_content = unreleased_match.group(1)
              # Check if there are any actual entries (not just empty section)
              if re.search(r'### (Added|Changed|Deprecated|Removed|Fixed|Security).*?\n- ', unreleased_content, re.DOTALL):
                  print("has_entries=true")
                  exit(0)

          print("has_entries=false")
          EOF

      - name: Comment on missing changelog
        if: steps.check-changelog.outputs.has_entries == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚠️ Changelog Validation Failed

              This pull request doesn't include proper changelog entries in the **Unreleased** section.

              ### Required Format

              Please add your changes to \`CHANGELOG.md\` under the **Unreleased** section using this format:

              \`\`\`markdown
              ## [Unreleased]

              ### Added
              - Your new feature description [#${{ context.issue.number }}](${{ context.event.pull_request.html_url }})

              ### Fixed
              - Bug fix description [#${{ context.issue.number }}](${{ context.event.pull_request.html_url }})
              \`\`\`

              ### Categories

              Use the appropriate category:
              - **Added** for new features
              - **Changed** for changes in existing functionality
              - **Deprecated** for soon-to-be removed features
              - **Removed** for now removed features
              - **Fixed** for any bug fixes
              - **Security** in case of vulnerabilities

              ### Example

              \`\`\`markdown
              ## [Unreleased]

              ### Added
              - Support for nested serializer error handling [#123](https://github.com/...)

              ### Fixed
              - Issue with pagination metadata formatting [#124](https://github.com/...)
              \`\`\`

              Please update the changelog and push the changes to this branch. 🙏`
            });

      - name: Add label if no changelog
        if: steps.check-changelog.outputs.has_entries == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-changelog']
            });

  add-changelog-entry:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/add-changelog')
    runs-on: ubuntu-latest
    name: Add Structured Changelog Entry

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add structured changelog entry
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read current changelog
            const changelogPath = path.join(process.cwd(), 'CHANGELOG.md');
            let changelog = fs.existsSync(changelogPath) ? fs.readFileSync(changelogPath, 'utf8') : '# Changelog\n\n';

            // Get PR information
            const { data: pr } = await github.rest.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Get PR labels
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Determine category based on labels
            let category = 'Changed';
            if (labels.some(label => label.name === 'feature' || label.name === 'enhancement')) category = 'Added';
            if (labels.some(label => label.name === 'bug')) category = 'Fixed';
            if (labels.some(label => label.name === 'documentation')) category = 'Changed';
            if (labels.some(label => label.name === 'security')) category = 'Security';
            if (labels.some(label => label.name === 'breaking')) category = 'Changed';

            // Create structured changelog entry
            const entry = `### ${category}\n\n- ${pr.title} ([#${context.issue.number}](${pr.html_url}))\n`;

            // Insert entry in Unreleased section
            const unreleasedPattern = /(## \[Unreleased\]\n\n)/;
            if (unreleasedPattern.test(changelog)) {
              changelog = changelog.replace(unreleasedPattern, `$1${entry}`);
            } else {
              // If no Unreleased section, add one at the beginning
              changelog = `## [Unreleased]\n\n${entry}\n${changelog}`;
            }

            // Write updated changelog
            fs.writeFileSync(changelogPath, changelog);

            // Commit and push
            await exec.exec('git', ['config', 'user.name', 'github-actions']);
            await exec.exec('git', ['config', 'user.email', 'github-actions@github.com']);
            await exec.exec('git', ['add', 'CHANGELOG.md']);
            await exec.exec('git', ['commit', '-m', `docs: Add changelog entry for PR #${context.issue.number} [skip ci]`]);
            await exec.exec('git', ['push']);

            // Add comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Changelog entry added automatically under **${category}** section!

              \`\`\`markdown
              ${entry.trim()}
              \`\`\`

              Please review and adjust if needed.`
            });

            // Remove label if present
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'needs-changelog'
              });
            } catch (e) {
              // Label might not exist
            }

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    name: Create Release and Update Changelog
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Extract version and date
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          DATE=$(date +%Y-%m-%d)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Update changelog for release
        run: |
          python << 'EOF'
          import re
          from pathlib import Path
          import os

          version = os.environ['VERSION']
          date = os.environ['DATE']

          changelog_file = Path('CHANGELOG.md')
          content = changelog_file.read_text()

          # Replace Unreleased section with version section
          pattern = r'## \[Unreleased\](.*?)(?=\n## \[|$)'
          replacement = f'## [{version}] - {date}\\1\\n\\n## [Unreleased]\\n\\n'

          new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)

          changelog_file.write_text(new_content)
          print(f"✅ Updated changelog for version {version}")
          EOF
        env:
          VERSION: ${{ steps.version.outputs.version }}
          DATE: ${{ steps.version.outputs.date }}

      - name: Commit changelog update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: Update changelog for release ${{ steps.version.outputs.version }} [skip ci]"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
